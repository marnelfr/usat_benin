npm config set strict-ssl false -g


Tables
	user
		Toute personne qui veut accès à la plate forme doit être entregistré dans cette table
		Attributs:
			name: le prénom de l'utilisateur
			lastName: le nom de famille de l'utilisateur
			fullname: le nom complet de l'utilisateur
				Je vais juste créer un getter pour ça
			phone: le numéro de téléphone de l'utilisateur
			email: l'adresse email de l'utilisateur
			address: l'adresse physique de l'utilisateur
			status: passe à 1 si l'utilisateur peu se connecté à la plateforme
			-roles: le role de l'utilisateur
			-username: le username
			-password: le mot de passe
			createdAt: date d'enregistrement
			lastConnection: date de dernière connexion


	gestionnaire ou manager
		En plus d'être enregistré dans la table 'user', les gestionnaires de parc doivent également être enregistré dans cette table
		Attributs:
			userID
			fleetID
			compagny: la raison sociale de l'utilisateur
			ifu: le numero ifu
			registerNum: le numero du registre de commerce




	commissionnaire ou agent
		En plus d'être enreigstré dans la table 'user', les commissionnaires agréés en douane doivent également être enregistré dans cette table
		Attributs:
			userID
			compagny: la raison sociale de l'utilisateur
			ifu: le numero ifu
			registerNum: le numero du registre de commerce


	parc ou fleet
		Va garder la liste de toutes les parcs. L'administrateur du site doit pouvoir ajouter de nouveaux parcs au besoin.
		Attributs:
			name: le nom du parc
			info
			deleted
			createdAt
			userID: l'utilisateur ayant créer le parc


	vehicule ou vehicle
		Va garder la liste de toutes les véhicules pour lesquels sera fait des demandes d'enlèvements ou de transfert.
		Attributs:
			brandID: la marque du vehicule
			chassis: le chassis complet du vehicule
			putInUseAt: la date de mise en circulation
			shipID: le navire d'arrivée au port
			cameAt: date d'arriver au port
			consignee: le consignataire du navire
			importerID: l'importateur

	importer
		Va garder la liste des importateurs.
		Attributs:
			managerID: le gestionnaire l'ayant enregistrer
			userID: les informations de l'importateur dans la table user
			deleted
			createdAt


	marque ou brand
		Va garder la liste de toutes la marques de vehicules. L'administrateur du site doit pouvoir ajouter de nouvelles marques au besoin
		Attributs:
			name: le nom de la marque
			deleted
			createdAt


	navire ou ship
		Va garder la liste de toutes les navires qui ramène des véhicules au port de Cotonou. L'administrateur du site doit pouvoir ajouter de nouveaux navires au besoin
		Attributs:
			name: le nom du navie
			deleted
			createdAt


	file
		Gardera la liste de fichier updloader et le lien vers ses fichiers. Les fichiers n'ont pas se seront pas supprimper logiquement mais définitivement à la demande
		Attributs:
			userID: l'utilisateur ayant uploader le fichier
			clientName: le nom du fichier à son upload
			size: la taille du fichier
			link: le chemin menant au fichier
			deleted
			createdAt


	transfert ou transfer
		Toute demande de transfert fait par un gestionnaire de parc sera enregistré dans cette tables
		Attributs:
			managerID: le gestionnaire ayant fait la demande
			vehicleID: le vehicule par rapport auquel la demande a été fait
			status: l'etat de la demande (rejeter, approver, en attente, annuler)
			bolID: (bill of landing) la copie scannée du connaissement. redirige vers la table file
			deleted
			createdAt


	enlevement ou removal
		Toute demande d'enlevement fait par un commissionnaire agréé en douane sera enregistré dans cette tables
		Attributs:
			agentID: le commissionnaire ayant fait la demande
			vehicleID: le vehicule pour lequel la demande est fait
			removerID: l'enleveur
			status: l'etat de la demande (rejeter, approver, en attente, annuler)
			bfuNum: le numero BFU réglé
				---Je ne l'ai plus utilisé. Ils seront sauvegarder dans demande_file
				payBankID: le banque de payement
				entryNum: le numero de la declaration de douane
				bolID: (bill of landing) la copie scannée du connaissement. redirige vers la table file
				entryID: l'id de la copie scanné de la déclaration de douane. renvoie à file
				receiptID: l'id de la copie scanné du reçu de banque. renvoie à file
				bfuID: l'id de la copie scanné du BFU réglé

	demande_file
		Attributs:
			removalID
			transferID
			fileID
			usedFor: le type de fichier
			createdAt
			deteled

	bank
		Va garder la liste de toutes les banques
		Attributs:
			name:
			deleted
			createdAt


	remover
		Gadera la liste des enleveur de vehicule enregistré par les commisionnaire agréés en douane
		Attributs:
			agentID: le commissionnaire ayant enregistré l'enleveur
			userID: les informations de l'enleveur se trouvant dans la table user
			cinID: l'id de la copie scanné de la CIN de l'enleveur. renvoie à la table file
			deleted
			createdAt



	processing
		Le traitement des demandes de transfert ou d'enlevement
		Attributs:
			transferID: le tranfert concerné. nullable
			removalID: l'enlevement concerné. nullable
			userID: l'utilisateur ayant fait le traitement
			verdict: l'avis après traitement
				0 pour rejet
				1 pour accepter
			reason: raison de rejet de transfert ou l'envelement

	profil
		La table contiendra la liste des profiles de l'application.
		Attributs:
			name: le nom du profile
			deleted
			createdAt

	home_announce
		La table contiendra toutes le communiqués du site. Le deux dernières apparaitrons sur la page d'accueil
		Attributs:
			summery: le resumé du communiqué qui apparaitra sur la page d'accueil
			content: le comuniqué en détail. Penser à mettre en place, un outil d'édition de text pour ça
			deleted
			createdAt

	notification
		Gardera la liste des changements d'états qu'a subit les demandes d'un gestionnaire ou commissionnaire.
		Attributs:
			userID
			removalID
			transferID
			typeID
			message: en cas de refus, c'est la raison du refus. Sinon c'est un message par defaut de succès


	type
		Gardera la liste des types de message qu'on peut avoir
		Attributs:
			name
			icon
			deleted
			createdAt



Les acteurs du système
	Les gestionnaires de parc
		- Modification de profil
		- Visualiser la liste des véhicules traités (pour lesquelles des demandes ont été faites)
		sur divers périodes
		- Gérer la liste des importateurs avec qui ils travaillent
		- Accéder à un menu Message pour notifier de l’évolution de leurs demandes
		- Accéder au sous menu des demandes pour avoir la possibilité de modifier ou
		supprimer des demandes en cas d’erreur

	Les commissionnaires
		- Modifier les informations de leur profil ;
		- Visualiser la liste des véhicules traités (pour lesquelles des demandes ont été faites)
		sur divers périodes
		- Suivre les demandes d’enlèvements envoyés
		- Connaitre l’étape du traitement de leur demande
		- Voir les statistiques de leurs activités sur diverses périodes

	Le personnel de CCIB ou Le personnel du MIT
		- Modifier les informations de leur profil ;
		- Le nombre de véhicule transféré sur les différents parcs sur une période de temps définie
		- Le nombre de véhicule enlevé
		- Les statistiques sur l’utilisation de la plateforme (nombre moyens d’utilisation par mois,
		heure etc.), les opérations les plus fréquentes.

		(herite de personnel de CCIB ou MIT)
		Le personnel de USAT Benin
			- valider le compte des inscrits
			- traiter les differents demandes
				- accepter demande
				- rejeter demande
			- enregistrer dans les tables de configuration




jsonViewerAwesome chrome


http://www.nom-domaine.bj


Controllers
	Je pense mettre en place des controlleurs pour chaque type d'acteur du système.
	Ce sont:
		Commissionnaire ou Agent
		Gestionnaire ou Manager
		Admin
		Staff : pour le personnel de USAT qui seront charger d'etudier les demandes
		Control: pour le personnel de CCIB et MIT

      Pour le moment, je ne vois que le codage des tables de bord ici.
      Même que beaucoup seront pratiquement les mêmes choses vu que
      le menu sera géré directement dans le eventsubscriber

+Voir dans quel mesure mettre en place les differentes profil d'utilisateur
-et finaliser complement l'inscription.
-Mettre en place le champ slug à toutes les tables utilitaires
-L'inscription et le reset de mot de passe.
Après on va passer au tableaux de bords
Après à l'enregistrer de transfère
  et sous-actions
Après à l'enregistrer d'enlevement
  et sous-actions
Après l'etude des demandes par usat
Après la creation de personne usat, ccib et mit par usat
Après creation de usat par les admin

Les profils et hierachie
  Les users comme importer et autres n'ont aucun role
   Tous les autres ont le rôle user
   agent: role_agent
   manager: role_manager
   ccib et mit: role_control
   usat: role_control et role_staff
   admin: role_admin

Il faut penser à supprimer les templates de adminlte si je veux plus les utiliser

!!!TROUVER LE MOYEN DE RALLONGER LE DELAIT DE VALIDATION DES MAILS

BreadcrumbMenuEvent::class => ['onSetupNavbar', 100],
	Ajouter ceci au menu event subscriber permet d'afficher le menu dans le coin sup droit

{% block page_content %}{% endblock %}
	Permet de definir le contenu de la page
	Donc le tableau de bord des utilisateurs devrait avoir par exemple le même template par exemple dont eux tous vont herité.
	Maintenant pour chacun, on definiera simplement la page_content




































SECURITY

composer require symfony/security-bundle		
	To install it

# config/packages/security.yaml
security:
    enable_authenticator_manager: true
    #add this to use the new security experience


php bin/console make:user
	To create the class User

The only rule about your User class is that it must implement Symfony\Component\Security\Core\User\UserInterface. Feel free to add any other fields or logic you need.

After each update of our entity, we better make a migration and a d:m:m


The “User Provider”
https://symfony.com/doc/current/security/user_provider.html	
	Add "Remember me" to our login
	https://symfony.com/doc/current/security/remember_me.html

	Be able to switch for a user to another one
	https://symfony.com/doc/current/security/impersonating_user.html


Encoding Passwords
	security:
	    # ...

	    encoders:
	        # use your user class name here
	        App\Entity\User:
	            # Use native password encoder
	            # This value auto-selects the best possible hashing algorithm
	            # (i.e. Sodium when available).
	            algorithm: auto


 php bin/console make:fixtures
 	Pour créer des fixtures.
 	ça necessite l'installation d'un composant

  php bin/console security:encode-password
  	Permet d'encoder les password manuellement pour la création de nos utilisateurs


Authentication & Firewalls
	The security system is configured in config/packages/security.yaml
	The most important section is firewalls:
	# config/packages/security.yaml
	security:
	    firewalls:
	        dev: #makes sure that you don’t accidentally block Symfony’s dev tools
	            pattern: ^/(_(profiler|wdt)|css|images|js)/
	            security: false
	        main:
	            anonymous: true #for unknown use. They should only have access to the homepage or login page
	            lazy: true

	A firewall can have many modes of authentication
	To say many ways to ask the question “Who are you?”

	C'est la même chose avec les allow dans meteor. Si un seul firewall accept, tous accept.

	The lazy anonymous mode prevents the session from being started if there is no need for authorization.

Authenticating your Users
	Authentication providers
		https://symfony.com/doc/current/security/auth_providers.html

	Third-party service authentication
		https://github.com/hwi/HWIOAuthBundle

Guard Authenticators
	Gives complete control over the authentication process

	How to Build a Login Form
		https://symfony.com/doc/current/security/form_login_setup.html

		see this for the most detailed description of authenticators and how they work:
			https://symfony.com/doc/current/security/guard_authentication.html


Denying Access, Roles and other Authorization
	https://symfony.com/doc/current/security.html#denying-access-roles-and-other-authorization

	Authorization is the way to decide if a user can access some resource (a URL, a model object, a method call, …)

Roles
	https://symfony.com/doc/current/security.html#roles
	Roles are an array that’s stored in the database, and every user is always given at least one role: ROLE_USER
	!!Mais chez moi par exemple, ils n'ont pas tous le ROLE_USER.
	S'assurer donc de donner le role ROLE_USER à ceux qui doivent l'avoir à leur création.

	Every role must start with ROLE_ (otherwise, things won’t work as expected)
	Other than that, a role is just a string and you can invent what you need (e.g. ROLE_PRODUCT_ADMIN)

Add Code to Deny Access
	Securing URL patterns (access_control)
	# config/packages/security.yaml
	security:
	    # ...
	    firewalls:
	    	# ...
	    access_control:
	        # require ROLE_ADMIN for /admin*
	        - { path: '^/admin', roles: ROLE_ADMIN }

	        # or require ROLE_ADMIN or IS_AUTHENTICATED_FULLY for /admin*
	        - { path: '^/admin', roles: [IS_AUTHENTICATED_FULLY, ROLE_ADMIN] }

	        # the 'path' value can be any valid regular expression
	        # (this one will match URLs like /api/post/7298 and /api/comment/528491)
	        - { path: ^/api/(post|comment)/\d+$, roles: ROLE_USER }


	You can define as many URL patterns as you need. The first match from the top will be used.

	Prepending the path with ^ means that only URLs beginning with the pattern are matched.
	More info
		https://symfony.com/doc/current/security/access_control.html


	In controller
		$this->denyAccessUnlessGranted('IS_AUTHENTICATED_FULLY');
		$this->denyAccessUnlessGranted('ROLE_ADMIN');

	    // or add an optional message - seen by developers
	    $this->denyAccessUnlessGranted('ROLE_ADMIN', null, 'User tried to access a page without having ROLE_ADMIN');

	    /**
		 * Require ROLE_ADMIN for *every* controller method in this class.
		 *
		 * @IsGranted("ROLE_ADMIN")
		 */
		class AdminController extends AbstractController

		/**
         * Require ROLE_ADMIN for only this controller method.
	     *
	     * @IsGranted("ROLE_ADMIN")
	     */
	    public function adminDashboard()

    In twig
    	{% if is_granted('ROLE_ADMIN') %}
		    <a href="...">Delete</a>
		{% endif %}



Hierarchical Roles
	# config/packages/security.yaml
	security:
	    # ...

	    role_hierarchy:
	        ROLE_ADMIN:       ROLE_USER
	        ROLE_SUPER_ADMIN: [ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH]

Users with the ROLE_ADMIN role will also have the ROLE_USER role. And users with ROLE_SUPER_ADMIN, will automatically have ROLE_ADMIN, ROLE_ALLOWED_TO_SWITCH and ROLE_USER (inherited from ROLE_ADMIN).

Using role hierarchy
	// BAD - $user->getRoles() will not know about the role hierarchy
	$hasAccess = in_array('ROLE_ADMIN', $user->getRoles());

	// GOOD - use of the normal security methods
	$hasAccess = $this->isGranted('ROLE_ADMIN');
	$this->denyAccessUnlessGranted('ROLE_ADMIN');



Add a Reset Password Feature
	https://symfony.com/doc/current/security/reset_password.html

	Generating the Reset Password Code
		composer require symfonycasts/reset-password-bundle
		php bin/console make:reset-password
			The make:reset-password command will ask you a few questions to help setting up the 

	Customization in
		reset_password.yaml

	For more information
		https://github.com/symfonycasts/reset-password-bundle

	Then open your browser, go to "/reset-password" and enjoy!

Customize Error Pages
	https://symfony.com/doc/current/controller/error_pages.html


Logging Out
	# config/packages/security.yaml
	security:
	    # ...

	    firewalls:
	        main:
	            # ...
	            logout:
	                path:   app_logout

	                # where to redirect after logout
	                # target: app_any_route


Customizing Logout
    https://symfony.com/doc/current/security.html#customizing-logout







